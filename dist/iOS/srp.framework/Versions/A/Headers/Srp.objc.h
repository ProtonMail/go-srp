// Objective-C API for talking to go-srp Go package.
//   gobind -lang=objc go-srp
//
// File is generated by gobind. Do not edit.

#ifndef __Srp_H__
#define __Srp_H__

@import Foundation;
#include "Universe.objc.h"


@class SrpAuthInfo;
@class SrpProofs;

/**
 * AuthInfo stores byte data for the calculation of SRP proofs.
 * Changed SrpAuto to AuthInfo because the name will be used as srp.SrpAuto by other packages and as SrpSrpAuth on mobile
 * Also the data from the API called AuthInfo. it could be match the meaning and reduce the confusion
 */
@interface SrpAuthInfo : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewAuthInfo Creates new SrpAuth from strings input. Salt and server ephemeral are in
base64 format. Modulus is base64 with signature attached. The signature is
verified against server key. The version controls password hash algorithm.
 */
- (instancetype)init:(long)version username:(NSString*)username password:(NSString*)password salt:(NSString*)salt signedModulus:(NSString*)signedModulus serverEphemeral:(NSString*)serverEphemeral;
- (NSData*)modulus;
- (void)setModulus:(NSData*)v;
- (NSData*)serverEphemeral;
- (void)setServerEphemeral:(NSData*)v;
- (NSData*)hashedPassword;
- (void)setHashedPassword:(NSData*)v;
/**
 * GenerateProofs calculates SPR proofs.
 */
- (SrpProofs*)generateProofs:(long)length error:(NSError**)error;
/**
 * GenerateVerifier verifier for update pwds and create accounts
 */
- (NSData*)generateVerifier:(long)length error:(NSError**)error;
@end

/**
 * Proofs Srp Proofs object. Changed SrpProofs to Proofs because the name will be used as srp.SrpProofs by other packages and as SrpSrpProofs on mobile
ClientProof []byte  client proof
ClientEphemeral []byte  calculated from
ExpectedServerProof []byte
 */
@interface SrpProofs : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (NSData*)clientProof;
- (void)setClientProof:(NSData*)v;
- (NSData*)clientEphemeral;
- (void)setClientEphemeral:(NSData*)v;
- (NSData*)expectedServerProof;
- (void)setExpectedServerProof:(NSData*)v;
@end

@interface Srp : NSObject
/**
 * ErrDataAfterModulus found extra data after decode the modulus
 */
+ (NSError*) errDataAfterModulus;
+ (void) setErrDataAfterModulus:(NSError*)v;

/**
 * ErrInvalidSignature invalid modulus signature
 */
+ (NSError*) errInvalidSignature;
+ (void) setErrInvalidSignature:(NSError*)v;

@end

/**
 * BCryptHash function bcrypt algorithm to hash password with salt
 */
FOUNDATION_EXPORT NSString* SrpBCryptHash(NSString* password, NSString* salt, NSError** error);

/**
 * CleanUserName returns the input string in lower-case without characters `_`,
`.` and `-`.
 */
FOUNDATION_EXPORT NSString* SrpCleanUserName(NSString* userName);

/**
 * ExpandHash extends the byte data for SRP flow
 */
FOUNDATION_EXPORT NSData* SrpExpandHash(NSData* data);

FOUNDATION_EXPORT NSString* SrpGetModulusKey(void);

/**
 * HashPassword returns the hash of password argument. Based on version number
following arguments are used in addition to password:
* 0, 1, 2: userName and modulus
* 3, 4: salt and modulus
 */
FOUNDATION_EXPORT NSData* SrpHashPassword(long authVersion, NSString* password, NSString* userName, NSData* salt, NSData* modulus, NSError** error);

/**
 * NewAuthInfo Creates new SrpAuth from strings input. Salt and server ephemeral are in
base64 format. Modulus is base64 with signature attached. The signature is
verified against server key. The version controls password hash algorithm.
 */
FOUNDATION_EXPORT SrpAuthInfo* SrpNewAuthInfo(long version, NSString* username, NSString* password, NSString* salt, NSString* signedModulus, NSString* serverEphemeral, NSError** error);

#endif
